Version Control System

What is VCS ?
- The practice of managing and tracking changes to software code.

Pushing:
- The act of copying changes in local repo to the remote server repo

Pulling:
- The act of copying changes from server/remote repo on to the local repo

Branching:
- Branching allows developers to work on different feature simultaneously

Merging:
- Is the act of combining changes from one branch to another branch

Master/Main Branch:
- default branch in vcs
- it contains the stable and production ready version of the project

Upstream Branch :
- Original repo from which another developers fork or clone the code

git ignore file:
- files which we don’t want to track and control it’s changes those file names are mentioned in this file
- to ignore file write its .extention
- We can also ignore folder
- To ignore folder syntax is : /folder-name

NOTE: to ignore the file from getting tracked we have to commit the changes made to the git ignore file otherwise system will keep tracking the files and folders.

- Types of VCS:
1.Centralized Version Control System
2.Distributed Version Control System

1.Centralized Version Control System :
A single, centralized repository stores all versions of the project files.

PROS :
- Centralized repository
- Version Control
- Collaboration

CONS :
- Single point of failure
- Slow push and pull operations
- Performance bottlenecks
Example : Concurrent Version Control(CVS),subversion(SVN)

2.Distributed Version Control System:
- It allows developers to work simultaneously without depending on the central server

PROS :
- Version Control
- History tracking
- Branching and merging
- Parallel development
- Faster operations

CONS:
- Branching complexity
- Merge conflicts
- Synchronization overheads
Example : Git,Mercurial

Trunk Based Development:
- Trunk-based development is a version control management practice where developers merge small, frequent updates to a core “trunk” /main branch.

Features:
- Continuous integration
- Feature toggle
- Early identification of issue
- Fewer merge conflicts

PROS :
- Improves communication, collaboration, speed and code quality
- Continuous deployment

CONS: 
- Code isolation
- Not suitable for big projects
- Require effective communication

Branch Based Development
- Is a methodology where developers create separate branches for different features or tasks, working on them in isolation before merging them back into the main branch.

PROS :
- Branching
- Merging
- Isolation of changes
- Code ownership

CONS :
- Complex Merge conflicts
- Difficulties in tracking changes
- Branch management overhead
- Integration delays
